"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
"""
import sys
import os
from unittest.mock import Mock, MagicMock

# –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ –∏–º–ø–æ—Ä—Ç–∞
mock_scheduler_module = MagicMock()
mock_scheduler_module.BackgroundScheduler = Mock
mock_scheduler_module.DateTrigger = Mock
sys.modules['apscheduler'] = MagicMock()
sys.modules['apscheduler.schedulers'] = MagicMock()
sys.modules['apscheduler.schedulers.background'] = mock_scheduler_module
sys.modules['apscheduler.triggers'] = MagicMock()
sys.modules['apscheduler.triggers.date'] = mock_scheduler_module

# –ú–æ–∫–∞–µ–º pybit
sys.modules['pybit'] = MagicMock()
sys.modules['pybit.unified_trading'] = MagicMock()

# –ú–æ–∫–∞–µ–º telebot
mock_telebot = MagicMock()
sys.modules['telebot'] = mock_telebot

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from bytbit_trading_bot.utils import load_json, save_json, USERS_FILE


def test_get_balance_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    import bytbit_trading_bot.trading as trading_module
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–µ—Å—Å–∏–∏
    mock_session = Mock()
    mock_session.get_wallet_balance.return_value = {
        "retCode": 0,
        "result": {
            "list": [{
                "coin": [
                    {
                        "coin": "USDT",
                        "walletBalance": "100.5",
                        "availableToWithdraw": "95.2",
                        "locked": "5.3"
                    },
                    {
                        "coin": "BTC",
                        "walletBalance": "0.001",
                        "availableToWithdraw": "0.001",
                        "locked": "0"
                    }
                ]
            }]
        }
    }
    
    mock_bot = Mock()
    mock_bot.send_message = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 88888
    users = {
        str(test_user_id): {
            "enabled": True,
            "api_key": "test_key",
            "api_secret": "test_secret"
        }
    }
    save_json(USERS_FILE, users)
    
    # –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    original_HTTP = trading_module.HTTP
    trading_module.HTTP = Mock(return_value=mock_session)
    
    try:
        trading_module.get_balance(test_user_id, mock_bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω get_wallet_balance
        assert mock_session.get_wallet_balance.called, "get_wallet_balance –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
        assert mock_bot.send_message.called, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
        call_args = mock_bot.send_message.call_args
        message_text = call_args[0][1]
        assert "üí∞" in message_text or "–ë–∞–ª–∞–Ω—Å" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"
        assert "USDT" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ USDT"
        
        print("‚úÖ –¢–µ—Å—Ç test_get_balance_success –ø—Ä–æ–π–¥–µ–Ω")
    finally:
        trading_module.HTTP = original_HTTP


def test_get_balance_no_api_keys():
    """–¢–µ—Å—Ç —á—Ç–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API –∫–ª—é—á–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞"""
    import bytbit_trading_bot.trading as trading_module
    
    mock_bot = Mock()
    mock_bot.send_message = Mock()
    
    test_user_id = 88887
    users = {
        str(test_user_id): {
            "enabled": True,
            "api_key": "",  # –ü—É—Å—Ç–æ–π API –∫–ª—é—á
            "api_secret": ""
        }
    }
    save_json(USERS_FILE, users)
    
    try:
        trading_module.get_balance(test_user_id, mock_bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert mock_bot.send_message.called, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        call_args = mock_bot.send_message.call_args
        message_text = call_args[0][1]
        assert "‚ùå" in message_text and "API –∫–ª—é—á–∏" in message_text, \
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API –∫–ª—é—á–µ–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        print("‚úÖ –¢–µ—Å—Ç test_get_balance_no_api_keys –ø—Ä–æ–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")


def test_get_balance_api_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API"""
    import bytbit_trading_bot.trading as trading_module
    
    mock_session = Mock()
    mock_session.get_wallet_balance.return_value = {
        "retCode": 10001,
        "retMsg": "Invalid API key"
    }
    
    mock_bot = Mock()
    mock_bot.send_message = Mock()
    
    test_user_id = 88886
    users = {
        str(test_user_id): {
            "enabled": True,
            "api_key": "test_key",
            "api_secret": "test_secret"
        }
    }
    save_json(USERS_FILE, users)
    
    original_HTTP = trading_module.HTTP
    trading_module.HTTP = Mock(return_value=mock_session)
    
    try:
        trading_module.get_balance(test_user_id, mock_bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert mock_bot.send_message.called, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        call_args = mock_bot.send_message.call_args
        message_text = call_args[0][1]
        assert "‚ùå" in message_text and "–æ—à–∏–±–∫–∞" in message_text.lower(), \
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        
        print("‚úÖ –¢–µ—Å—Ç test_get_balance_api_error –ø—Ä–æ–π–¥–µ–Ω")
    finally:
        trading_module.HTTP = original_HTTP


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
    
    try:
        test_get_balance_success()
        test_get_balance_no_api_keys()
        test_get_balance_api_error()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

