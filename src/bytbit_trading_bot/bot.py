"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import logging
import os
import telebot
from .utils import save_user_config, get_user_config, is_user_enabled, load_json, TOKENS_FILE
from .config import TOKEN
from datetime import datetime, timezone
import pytz

logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

def get_scheduler():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        from .scheduler import scheduler
        return scheduler
    except ImportError:
        return None


@bot.message_handler(commands=['start'])
def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_config = get_user_config(user_id)
    
    if not user_config:
        user_config = {
            "enabled": False,
            "api_key": "",
            "api_secret": "",
            "leverage": 10,
            "margin": 20
        }
        save_user_config(user_id, user_config)
    
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Bybit\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "/list - –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n"
        "/enable - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "/disable - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "/set_api - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏\n"
        "/set_leverage - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–µ—á–æ\n"
        "/set_margin - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä–∂—É\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    
    bot.reply_to(message, text)


@bot.message_handler(commands=['help'])
def help_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ Bybit –∫–æ–º–∞–Ω–¥–æ–π /set_api\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–ª–µ—á–æ –∫–æ–º–∞–Ω–¥–æ–π /set_leverage\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä–∂—É –∫–æ–º–∞–Ω–¥–æ–π /set_margin\n"
        "4. –í–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /enable\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ @TokenSplashBybit"
    )
    bot.reply_to(message, text)


@bot.message_handler(commands=['status'])
def status_message(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    user_id = message.from_user.id
    user_config = get_user_config(user_id)
    
    enabled = "‚úÖ –í–∫–ª—é—á–µ–Ω" if user_config.get("enabled", False) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    api_key_set = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if user_config.get("api_key") else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    leverage = user_config.get("leverage", 10)
    margin = user_config.get("margin", 20)
    
    text = (
        f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {enabled}\n"
        f"API –∫–ª—é—á: {api_key_set}\n"
        f"–ü–ª–µ—á–æ: {leverage}x\n"
        f"–ú–∞—Ä–∂–∞: {margin} USDT"
    )
    
    bot.reply_to(message, text)


@bot.message_handler(commands=['enable'])
def enable_bot(message):
    """–í–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞"""
    user_id = message.from_user.id
    user_config = get_user_config(user_id)
    
    if not user_config.get("api_key") or not user_config.get("api_secret"):
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /set_api")
        return
    
    user_config["enabled"] = True
    save_user_config(user_id, user_config)
    bot.reply_to(message, "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")


@bot.message_handler(commands=['disable'])
def disable_bot(message):
    """–í—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞"""
    user_id = message.from_user.id
    user_config = get_user_config(user_id)
    
    user_config["enabled"] = False
    save_user_config(user_id, user_config)
    bot.reply_to(message, "‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")


@bot.message_handler(commands=['set_api'])
def set_api(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π"""
    bot.reply_to(message, (
        "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π Bybit\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<API_KEY> <API_SECRET>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "abc123xyz secret456"
    ))
    bot.register_next_step_handler(message, process_api_keys)


def process_api_keys(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ API –∫–ª—é—á–∏"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    parts = text.split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <API_KEY> <API_SECRET>")
        return
    
    api_key = parts[0]
    api_secret = parts[1]
    
    user_config = get_user_config(user_id)
    user_config["api_key"] = api_key
    user_config["api_secret"] = api_secret
    save_user_config(user_id, user_config)
    
    bot.reply_to(message, "‚úÖ API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


@bot.message_handler(commands=['set_leverage'])
def set_leverage(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ—á–∞"""
    bot.reply_to(message, "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
    bot.register_next_step_handler(message, process_leverage)


def process_leverage(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–ª–µ—á–æ"""
    user_id = message.from_user.id
    
    try:
        leverage = float(message.text.strip())
        if leverage < 1 or leverage > 100:
            bot.reply_to(message, "‚ùå –ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
        
        user_config = get_user_config(user_id)
        user_config["leverage"] = leverage
        save_user_config(user_id, user_config)
        
        bot.reply_to(message, f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")


@bot.message_handler(commands=['list'])
def list_tokens(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        tokens = load_json(TOKENS_FILE)
        
        if not tokens:
            bot.reply_to(message, "üìã –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
            return
        
        scheduled_jobs = []
        scheduler = get_scheduler()
        if scheduler:
            scheduled_jobs = {job.id for job in scheduler.get_jobs()}
        
        text = "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\n\n"
        
        sorted_tokens = sorted(
            tokens.items(),
            key=lambda x: x[1].get("result_datetime", ""),
            reverse=False
        )
        
        tz_moscow = pytz.timezone("Europe/Moscow")
        now = datetime.now(tz_moscow)
        future_count = 0
        
        for token_key, token_data in sorted_tokens:
            token = token_data.get("token", "N/A")
            result_datetime_str = token_data.get("result_datetime")
            
            is_scheduled = False
            if result_datetime_str:
                try:
                    result_date = datetime.fromisoformat(result_datetime_str)
                    if result_date.tzinfo is None:
                        result_date = tz_moscow.localize(result_date)
                    else:
                        result_date = result_date.astimezone(tz_moscow)
                    
                    job_id = f"token_{token}_{result_date.isoformat()}"
                    is_scheduled = job_id in scheduled_jobs
                    
                    if result_date > now:
                        future_count += 1
                        status = "‚úÖ" if is_scheduled else "‚ö†Ô∏è"
                        date_formatted = result_date.strftime("%d.%m.%Y %H:%M")
                        text += f"{status} {token} - {date_formatted} MSK\n"
                except Exception as e:
                    logger.error(f"Error processing token {token}: {e}")
        
        if future_count == 0:
            text = "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–≤—Å–µ –¥–∞—Ç—ã –ø—Ä–æ—à–ª–∏)"
        
        text += f"\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {future_count}"
        
        bot.reply_to(message, text)
        
    except Exception as e:
        logger.error(f"Error listing tokens: {e}", exc_info=True)
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")


@bot.message_handler(commands=['balance'])
def balance_message(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ Bybit"""
    user_id = message.from_user.id
    from .trading import get_balance
    get_balance(user_id, bot)


@bot.message_handler(commands=['set_margin'])
def set_margin(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∂–∏"""
    bot.reply_to(message, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∂–∏ –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
    bot.register_next_step_handler(message, process_margin)


def process_margin(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é –º–∞—Ä–∂—É"""
    user_id = message.from_user.id
    
    try:
        margin = float(message.text.strip())
        if margin < 1:
            bot.reply_to(message, "‚ùå –ú–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        user_config = get_user_config(user_id)
        user_config["margin"] = margin
        save_user_config(user_id, user_config)
        
        bot.reply_to(message, f"‚úÖ –ú–∞—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {margin} USDT")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")


def start_telebot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    logger.info("[Telebot] Starting...")
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logger.error(f"[Telebot] Error: {e}", exc_info=True)
        start_telebot()

