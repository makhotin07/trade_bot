"""
–ü–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–∞
"""
import re
import logging
import asyncio
from datetime import datetime, timezone
from telethon import TelegramClient, events
from .utils import parse_result_date, load_json, save_json, TOKENS_FILE, is_user_enabled, USERS_FILE
from .config import API_ID, API_HASH, SESSION_NAME, CHANNEL, POST_REGEX, MESSAGES_HISTORY_LIMIT, TOKEN
from .scheduler import schedule_token
import pytz

logger = logging.getLogger(__name__)

client = None


def notify_users_about_new_token(token, result_date_str, result_date):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ
    
    Args:
        token: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
        result_date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π Result
        result_date: datetime –æ–±—ä–µ–∫—Ç —Å –¥–∞—Ç–æ–π Result
    """
    try:
        from .bot import bot
        
        users = load_json(USERS_FILE)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        tz_moscow = pytz.timezone("Europe/Moscow")
        if result_date.tzinfo is None:
            result_date_display = tz_moscow.localize(result_date)
        else:
            result_date_display = result_date.astimezone(tz_moscow)
        
        date_str = result_date_display.strftime("%d.%m.%Y %H:%M MSK")
        
        message_text = (
            f"üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìå –¢–æ–∫–µ–Ω: **{token}**\n"
            f"üìÖ –î–∞—Ç–∞ Result: {date_str}\n\n"
            f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏"
        )
        
        for user_id_str, user_config in users.items():
            user_id = int(user_id_str)
            if is_user_enabled(user_id):
                try:
                    bot.send_message(user_id, message_text, parse_mode='Markdown')
                    logger.info(f"[Parser] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ç–æ–∫–µ–Ω–µ {token}")
                except Exception as e:
                    logger.error(f"[Parser] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"[Parser] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ: {e}", exc_info=True)


async def process_message(message_text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã.
    
    Args:
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if not message_text:
        logger.debug("[Telethon] process_message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
        return False
    
    logger.debug(f"[Telethon] process_message: –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª–∏–Ω–æ–π {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    match = re.match(POST_REGEX, message_text, re.DOTALL | re.MULTILINE)
    if not match:
        match = re.search(POST_REGEX, message_text, re.DOTALL | re.MULTILINE)
    
    if not match:
        if "Result" in message_text or "result" in message_text.lower():
            logger.warning(f"[Telethon] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'Result', –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: {message_text[:200]}")
            logger.debug(f"[Telethon] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {POST_REGEX}")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞—Ç—É Result
    token = match.group("token")
    result_date_str = match.group("result_date")
    
    logger.info(f"[Telethon] –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω: {token}, –¥–∞—Ç–∞ Result: {result_date_str}")
    
    result_date = parse_result_date(result_date_str)
    if not result_date:
        logger.error(f"[Telethon] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {result_date_str}")
        return False
    
    now = datetime.now(result_date.tzinfo if result_date.tzinfo else timezone.utc)
    if result_date <= now:
        logger.debug(f"[Telethon] –î–∞—Ç–∞ {result_date_str} —É–∂–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    tokens = load_json(TOKENS_FILE)
    token_key = f"{token}_{result_date_str}"
    
    if token_key in tokens:
        logger.debug(f"[Telethon] –¢–æ–∫–µ–Ω {token} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    tokens[token_key] = {
        "token": token,
        "result_date": result_date_str,
        "result_datetime": result_date.isoformat(),
        "added_at": datetime.now().isoformat()
    }
    save_json(TOKENS_FILE, tokens)
    schedule_token(token, result_date)
    
    logger.info(f"[Telethon] –¢–æ–∫–µ–Ω {token} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {result_date}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    notify_users_about_new_token(token, result_date_str, result_date)
    
    return True


async def check_recent_messages():
    """
    –ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @TokenSplashBybit –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    
    –ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã –∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.
    """
    try:
        logger.info(f"[Telethon] –ß–∏—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {MESSAGES_HISTORY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {CHANNEL}")
        
        messages_processed = 0
        tokens_found = 0
        
        async for message in client.iter_messages(CHANNEL, limit=MESSAGES_HISTORY_LIMIT):
            messages_processed += 1
            if message.text and await process_message(message.text):
                tokens_found += 1
        
        tokens = load_json(TOKENS_FILE)
        logger.info(f"[Telethon] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {messages_processed} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {tokens_found} –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –≤—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {len(tokens)}")
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", exc_info=True)
        if "bot" in error_msg.lower() or "BotMethodInvalidError" in error_msg:
            logger.error(f"[Telethon] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –±–æ—Ç")
            logger.error(f"[Telethon] –†–µ—à–µ–Ω–∏–µ: —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª my_session.session –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
            logger.error(f"[Telethon] –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê, –∞ –Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        else:
            logger.error(f"[Telethon] –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:", exc_info=True)


async def start_telethon():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telethon –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    import os
    global client
    
    if not API_ID or not API_HASH:
        logger.error("[Telethon] API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(os.path.dirname(script_dir))
    session_path = os.path.join(project_root, f"{SESSION_NAME}.session")
    
    if not os.path.exists(session_path):
        session_path = SESSION_NAME
    
    client = TelegramClient(session_path, API_ID, API_HASH)
    
    @client.on(events.NewMessage(chats=CHANNEL))
    async def handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info(f"[Telethon] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {CHANNEL}")
            if event.message.text:
                logger.debug(f"[Telethon] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {event.message.text[:200]}")
                processed = await process_message(event.message.text)
                if processed:
                    logger.info(f"[Telethon] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Ç–æ–∫–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.debug(f"[Telethon] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–Ω–æ–Ω—Å —Ç–æ–∫–µ–Ω–∞")
            else:
                logger.debug(f"[Telethon] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ)")
        except Exception as e:
            logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
    
    try:
        session_file = os.path.join(project_root, f"{SESSION_NAME}.session")
        session_exists = os.path.exists(session_file)
        
        if not session_exists:
            session_file = f"{SESSION_NAME}.session"
            session_exists = os.path.exists(session_file)
        
        try:
            await client.connect()
        except Exception as e:
            logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            if not session_exists:
                logger.error(f"[Telethon] –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 scripts/init_telethon_session.py")
                return
            raise
        
        is_authorized = await client.is_user_authorized()
        
        if not is_authorized:
            logger.error(f"[Telethon] –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python3 scripts/init_telethon_session.py")
            logger.error(f"[Telethon] –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê, –∞ –ù–ï —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        me = await client.get_me()
        if me.bot:
            logger.error("[Telethon] –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∫–∞–∫ –±–æ—Ç! –£–¥–∞–ª–∏—Ç–µ my_session.session –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
        
        logger.info(f"[Telethon] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
        
        try:
            entity = await client.get_entity(CHANNEL)
            logger.info(f"[Telethon] –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {entity.title}")
        except Exception as e:
            logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {CHANNEL}: {e}")
            return
        
        await check_recent_messages()
        
        logger.info("[Telethon] –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞...")
        await client.run_until_disconnected()
    except EOFError:
        logger.error("[Telethon] –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        logger.error("[Telethon] –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é: python3 scripts/init_telethon_session.py")
    except Exception as e:
        logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        raise

