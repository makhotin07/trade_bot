"""
–ü–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–∞
"""
import re
import logging
import asyncio
from datetime import datetime, timezone
from telethon import TelegramClient, events
from .utils import parse_result_date, load_json, save_json, TOKENS_FILE
from .config import API_ID, API_HASH, SESSION_NAME, CHANNEL, POST_REGEX, MESSAGES_HISTORY_LIMIT
from .scheduler import schedule_token

logger = logging.getLogger(__name__)

client = None


async def process_message(message_text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã.
    
    –õ–æ–≥–∏–∫–∞:
    - –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ –¥–∞—Ç—É Result
    - –ï—Å–ª–∏ –≤—Ä–µ–º—è Result –≤ –±—É–¥—É—â–µ–º ‚Äî —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    
    Args:
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if not message_text:
        return False
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ (–∏—â–µ–º —Ñ–æ—Ä–º–∞—Ç: –¢–û–ö–ï–ù\n...Result DD.MM.YYYY HH:MM UTC –∏–ª–∏ –±–µ–∑ UTC)
    match = re.match(POST_REGEX, message_text, re.DOTALL | re.MULTILINE)
    
    if not match:
        logger.debug(f"[Telethon] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: {message_text[:100]}")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞—Ç—É Result
    token = match.group("token")
    result_date_str = match.group("result_date")
    
    logger.info(f"[Telethon] –ù–∞–π–¥–µ–Ω –∞–Ω–æ–Ω—Å: —Ç–æ–∫–µ–Ω={token}, Result={result_date_str}")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç
    result_date = parse_result_date(result_date_str)
    
    if not result_date:
        logger.error(f"[Telethon] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {result_date_str}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ Result –≤ –±—É–¥—É—â–µ–º
    now = datetime.now(result_date.tzinfo if result_date.tzinfo else timezone.utc)
    if result_date <= now:
        logger.info(f"[Telethon] –î–∞—Ç–∞ {result_date_str} —É–∂–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
    tokens = load_json(TOKENS_FILE)
    token_key = f"{token}_{result_date_str}"
    
    if token_key in tokens:
        logger.info(f"[Telethon] –¢–æ–∫–µ–Ω {token} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
    tokens[token_key] = {
        "token": token,
        "result_date": result_date_str,
        "result_datetime": result_date.isoformat(),
        "added_at": datetime.now().isoformat()
    }
    
    logger.info(f"[Telethon] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª {TOKENS_FILE}")
    save_json(TOKENS_FILE, tokens)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    tokens_after = load_json(TOKENS_FILE)
    if token_key in tokens_after:
        logger.info(f"[Telethon] ‚úÖ –¢–æ–∫–µ–Ω {token_key} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
    else:
        logger.error(f"[Telethon] ‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω {token_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    
    # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
    schedule_token(token, result_date)
    
    logger.info(f"[Telethon] ‚úÖ –¢–æ–∫–µ–Ω {token} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {result_date}")
    return True


async def check_recent_messages():
    """
    –ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @TokenSplashBybit –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    
    –ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã –∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.
    """
    try:
        logger.info(f"[Telethon] üìñ –ß–∏—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {MESSAGES_HISTORY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {CHANNEL}...")
        
        messages_processed = 0
        tokens_found = 0
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        async for message in client.iter_messages(CHANNEL, limit=MESSAGES_HISTORY_LIMIT):
            if message.text:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—Ö–æ–¥–∏—Ç –∞–Ω–æ–Ω—Å—ã –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏)
                if await process_message(message.text):
                    tokens_found += 1
                messages_processed += 1
        
        logger.info(f"[Telethon] ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {messages_processed} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {tokens_found} –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏")
        
    except Exception as e:
        error_msg = str(e)
        if "bot" in error_msg.lower() or "BotMethodInvalidError" in error_msg:
            logger.error(f"[Telethon] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –±–æ—Ç")
            logger.error(f"[Telethon] ‚ö†Ô∏è  –†–µ—à–µ–Ω–∏–µ: —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª my_session.session –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
            logger.error(f"[Telethon] ‚ö†Ô∏è  –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ 'Please enter your phone (or bot token):' –≤–≤–µ–¥–∏—Ç–µ –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê, –∞ –Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            logger.info(f"[Telethon] ‚ö†Ô∏è  –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", exc_info=True)


async def start_telethon():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telethon –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞.
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram —á–µ—Ä–µ–∑ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç (–Ω—É–∂–µ–Ω API ID –∏ Hash)
    2. –ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @TokenSplashBybit
    3. –ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã
    4. –ï—Å–ª–∏ –≤—Ä–µ–º—è Result –≤ –±—É–¥—É—â–µ–º ‚Äî —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    5. –°–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    import os
    global client
    
    if not API_ID or not API_HASH:
        logger.error("[Telethon] API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(os.path.dirname(script_dir))
    session_path = os.path.join(project_root, f"{SESSION_NAME}.session")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    if not os.path.exists(session_path):
        session_path = SESSION_NAME
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Telethon —Å –≤–∞—à–∏–º–∏ API credentials
    client = TelegramClient(session_path, API_ID, API_HASH)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
    @client.on(events.NewMessage(chats=CHANNEL))
    async def handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            await process_message(event.message.text)
        except Exception as e:
            logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        script_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(os.path.dirname(script_dir))  # –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç parser.py
        session_file = os.path.join(project_root, f"{SESSION_NAME}.session")
        session_exists = os.path.exists(session_file)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –ø—Ä–æ–±—É–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not session_exists:
            session_file = f"{SESSION_NAME}.session"
            session_exists = os.path.exists(session_file)
        
        # –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —á–µ—Ä–µ–∑ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç (–ù–ï —á–µ—Ä–µ–∑ –±–æ—Ç–∞!)
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        try:
            await client.connect()
        except Exception as e:
            logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            if not session_exists:
                logger.error(f"[Telethon] ‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                logger.error(f"[Telethon] ‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 scripts/init_telethon_session.py")
                return
            raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await client.is_user_authorized():
            if not session_exists:
                logger.warning(f"[Telethon] ‚ö†Ô∏è  –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é –æ–¥–∏–Ω —Ä–∞–∑.")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  ssh root@91.229.8.171")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  cd /root/trade_bot")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  source .venv/bin/activate")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  python3 -c \"import sys; sys.path.insert(0, 'src'); from bytbit_trading_bot.parser import start_telethon; import asyncio; asyncio.run(start_telethon())\"")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                logger.warning(f"[Telethon] ‚ö†Ô∏è  –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                logger.error(f"[Telethon] ‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ —Å–µ—Å—Å–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é.")
                return
            
            # –°–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            phone = os.getenv("TELEGRAM_PHONE")
            password = os.getenv("TELEGRAM_PASSWORD")
            
            if phone:
                logger.info(f"[Telethon] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                try:
                    await client.send_code_request(phone)
                    code = os.getenv("TELEGRAM_CODE")
                    if code:
                        await client.sign_in(phone, code, password=password)
                    else:
                        logger.error(f"[Telethon] –¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_CODE –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                        return
                except Exception as e:
                    logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
                    logger.error(f"[Telethon] –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—ã—à–µ)")
                    return
            else:
                logger.error(f"[Telethon] ‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –∏ –Ω–µ—Ç TELEGRAM_PHONE –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                logger.error(f"[Telethon] ‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_PHONE –∏ TELEGRAM_CODE")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –∫–∞–∫ –±–æ—Ç
        me = await client.get_me()
        if me.bot:
            logger.error("[Telethon] –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∫–∞–∫ –±–æ—Ç! –ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            logger.error("[Telethon] –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª my_session.session –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
            return
        
        logger.info(f"[Telethon] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
        
        # –®–∞–≥ 2: –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        # –®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã
        # –®–∞–≥ 4: –ï—Å–ª–∏ –≤—Ä–µ–º—è Result –≤ –±—É–¥—É—â–µ–º ‚Äî —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await check_recent_messages()
        
        # –®–∞–≥ 5: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        logger.info("[Telethon] –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...")
        await client.run_until_disconnected()
    except EOFError:
        logger.error("[Telethon] ‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        logger.error("[Telethon] ‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é –æ–¥–∏–Ω —Ä–∞–∑ (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—ã—à–µ)")
        logger.error("[Telethon] ‚ùå –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_PHONE –∏ TELEGRAM_CODE")
    except Exception as e:
        logger.error(f"[Telethon] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        raise

